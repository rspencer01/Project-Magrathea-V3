#version 400
 
// triangles, quads, or isolines
layout (triangles, equal_spacing, ccw) in;
in vec3 evaluationpoint_wor[];

layout(shared)uniform frameData
{
  mat4x4 transformationMatrix;
  vec4 cameraPos;
  mat4x4 projectionMatrix;  
};

out vec4 tsPosition; 
// gl_TessCoord is location within the patch
// (barycentric for triangles, UV for quads)
uniform sampler2D otherTexture;
void main () {
  vec3 p0 = gl_TessCoord.x * evaluationpoint_wor[0]; // x is one corner
  vec3 p1 = gl_TessCoord.y * evaluationpoint_wor[1]; // y is the 2nd corner
  vec3 p2 = gl_TessCoord.z * evaluationpoint_wor[2]; // z is the 3rd corner (ignore when using quads)
  vec3 pos = p0 + p1 + p2;
  pos.y += texture(otherTexture,(pos.xz)/8000).a*1000;
  if (pos.y<0)
  	pos.y = 0;
  tsPosition = vec4(pos,1);
  gl_Position = projectionMatrix*transformationMatrix*vec4 (pos, 1.0);
}