#version 140
in vec3 inPosition;
in vec4 inColour;
in vec2 inTex;
in vec3 inNorm;
in vec4 inTexShades;

layout(shared)uniform frameData
{
  mat4x4 transformationMatrix;
  vec4 cameraPos;
  mat4x4 projectionMatrix;  
};


layout(shared)uniform objectData
{
  mat4x4 objectMatrix;
  mat4x4 boneMatrices[64];
};

out vec4 vsPosition;
out vec4 vsNormal;
out vec4 vsColour;

void main()
{
vsColour = inColour;
  mat4 finalMatrix = (boneMatrices[int(inTexShades.x)]*inColour.x+
                boneMatrices[int(inTexShades.y)]*inColour.y + 
                boneMatrices[int(inTexShades.z)]*inColour.z  ) / (inColour.x+inColour.y+inColour.z);
  //finalMatrix = boneMatrices[int(inTexShades.x)];
  vsPosition = finalMatrix * vec4(inPosition.xyz,1);
  vsNormal = normalize(finalMatrix *  vec4(inNorm.xyz,1));
  vsPosition.z*=-1;              
}
