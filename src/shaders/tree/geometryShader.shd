#version 150

layout(points) in;
layout(triangle_strip,max_vertices=4) out;

in vec4 vsPosition[];
out vec4 gsPosition;
out vec2 gsTex;

layout(shared)uniform frameData
{
  mat4x4 transformationMatrix;
  vec4 cameraPos;
  mat4x4 projectionMatrix;  
};

layout(shared)uniform objectData
{
  mat4x4 objectMatrix;
};

vec4 mapToTexture(vec4 pos)
{
 return vec4(pos.xyz * 0.5 /pos.w + 0.5,1);
} 

uniform sampler2D heightmap;
uniform sampler2D noiseTexture;

void main() 
{
  vec4 inf = texture(heightmap,(vsPosition[0].xz)/8000);
  if (inf.y<0.2) return;
  if (inf.w<0.01) return;
  //if (length(cameraPos-vsPosition[0])>1000)return;
  //if (texture(noiseTexture,(vsPosition[0].zx)/4000).w<0) return;

  vec4 pos = vsPosition[0];
  pos.y =  texture(heightmap,(vsPosition[0].xz)/8000).a*1000;
  
  vec4 up = 17*vec4(0,1,0,0);
  vec4 toCam = (pos-cameraPos);
  toCam.y = 0;
  vec4 left = vec4(7*normalize(cross(up.xyz,toCam.xyz)),0);
  
  gsTex = vec2(0,0);
  gsPosition = (pos-left/2);
  gl_Position = projectionMatrix * transformationMatrix * gsPosition;
  EmitVertex();
  gsTex = vec2(0,1);
  gsPosition = (pos-left/2+up);
  gl_Position = projectionMatrix * transformationMatrix * gsPosition;
  EmitVertex();
  gsTex = vec2(1,0);
  gsPosition = (pos+left/2);
  gl_Position = projectionMatrix * transformationMatrix * gsPosition;
  EmitVertex();
  gsTex = vec2(1,1);
  gsPosition = (pos+left/2+up);
  gl_Position = projectionMatrix * transformationMatrix * gsPosition;
  EmitVertex();

  EndPrimitive();
}
